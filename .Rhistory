gbmTest<-predict(gbmFit,testing)
ldaTest<-predict(ldaFit,testing)
rfTest
colnames(rfTest)
combinedTestData <- data.frame(diagnosis = testing$diagnosis,
rftest = rfTest, gbmtest=gbmTest,ldatest=ldaTest,
combined=mode(rftest,gbmtest,ldatest))
combinedTestData <- data.frame(diagnosis = testing$diagnosis,
rftest = rfTest, gbmtest=gbmTest,ldatest=ldaTest,
combined=mode(c(rftest,gbmtest,ldatest))
)
table(rfTest)
max(table(rfTest))
names (rfTest)[rfTest==max(table(rfTest))]
names (rfTest)
max(table(as.vector(rfTest))
)
sort(table(rfTest))
table(rfTest)[1]
sort(table(rfTest),decreasing=T)[1]
name(sort(table(rfTest),decreasing=T)[1])
names(sort(table(rfTest),decreasing=T)[1])
names(sort(table(rfTest,gbmTest),decreasing=T)[1])
names(sort(table(cbind(rfTest,gbmTest,ldaTest),decreasing=T)[1])
names(sort(table(cbind(rfTest,gbmTest,ldaTest)),decreasing=T)[1])
table(cbind(rfTest,gbmTest,ldaTest)
)
table(cbind(rfTest,gbmTest,ldaTest)
cbind(rfTest,gbmTest,ldaTest)
gbmtest
gbmTest
ldaTest
rfTest
sum(cbind(rfTest,gbmTest,ldaTest)
)
rfTest+gbmTest+ldaTest
cbind(rfTest,gbmTest,ldaTest)
combined<-cbind(rfTest,gbmTest,ldaTest)
combined2<-combined[1+2+3]
combined2
combined
combined<-cbind(testing$diagnosis,rfTest,gbmTest,ldaTest)
combined
combined<-cbind(diagnosis=testing$diagnosis,rfTest,gbmTest,ldaTest)
head(combined)
rowSum(combined[2:4])
rowsums(combined[2:4])
row_sums(combined[2:4])
rowsum(combined[2:4])
combined$combTest<-apply((combined[2:4]), 1, sum)
combined$combTest<-apply((combined[,2:4]), 1, sum)
combined
combined<-cbind(diagnosis=testing$diagnosis,rfTest,gbmTest,ldaTest)
combined<-cbind(combined,apply((combined[,2:4]), 1, sum))
combined
head(combined)
combined<-cbind(combined,combTest=apply((combined[,2:4]), 1, sum))
head(combined)
combined<-cbind(diagnosis=testing$diagnosis,rfTest,gbmTest,ldaTest)
combined<-cbind(combined,combTest=apply((combined[,2:4]), 1, sum/3))
head(combined)
combined<-cbind(combined,combTest=apply((combined[,2:4]), 1, sum)/3)
head(combined)
combined<-cbind(combined,combTest=as.integer(apply((combined[,2:4]), 1, sum)/3)
head(combined)
round(apply((combined[,2:4]), 1, sum)/3,0)
combined<-cbind(combined,combTest=round(apply((combined[,2:4]), 1, sum)/3,0))
head(combined)
class(combined)
combined<-as.data.frame(combined)
class(combined)
combined
combined<-cbind(diagnosis=testing$diagnosis,rfTest,gbmTest,ldaTest)
combined<-cbind(combined,combTest=round(apply((combined[,2:4]), 1, sum)/3,0))
combined<-as.data.frame(combined)
head(combined)
tcrossprod(table(combined))
table(combined)
tcrossprod(combined)
tcrossprod(as.matrix(combined))
confusionMatrix(combined[1],combined[2])
confusionMatrix(combined[1],combined[3])
confusionMatrix(combined[1],combined[4])
confusionMatrix(combined[1],combined[5])
confusionMatrix(combined[,1],combined[,2])
confusionMatrix(combined[,1],combined[,3])
confusionMatrix(combined[,1],combined[,4])
confusionMatrix(combined[,1],combined[,5])
library(lars)
install.packages("lars")
library(lars)
head(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(concrete)
lasso.fit <- lars(as.matrix(training[,1:8]), training[,9], type="lasso", trace=TRUE)
# plot lasso regression model
plot(lasso.fit, breaks=FALSE, cex = 0.75)
# add legend
legend("topleft", covnames, pch=8, lty=1:length(covnames),
col=1:length(covnames), cex = 0.6)
covnames<-colnames(training[,1:8])
covnames<-colnames(training[,1:8])
plot(lasso.fit, breaks=FALSE, cex = 0.75)
# add legend
legend("topleft", covnames, pch=8, lty=1:length(covnames),
col=1:length(covnames), cex = 0.6)
?plot.enet
??plot.enet
install.packages("enet")
library(forecast)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("~/gaData.csv")
dat = read.csv("C:/Users/Jordi/Desktop/CURSOS/Prac_Machine_Learning/Quizzes/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fitTrain<-bats(tstrain)
plot(forecast(fitTrain))
fitTrain<-bats(tstrain)
fitTest<-forecast(tstest)
plot(fitTest); lines(tstest,col="red")
tstest = ts(testing$visitsTumblr)
fitTest<-forecast(tstest)
plot(fitTest); lines(tstest,col="red")
forecast(tstest)
testing
tstest
ts(testing$visitsTumblr)
plot(fitTest)
tstest
fitTest
library(forecast)
library(lubridate)  # For year() function below
dat = read.csv("C:/Users/Jordi/Desktop/CURSOS/Prac_Machine_Learning/Quizzes/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
fitTrain<-bats(tstrain)
fitTest<-forecast(tstest)
plot(fitTest); lines(tstest,col="red")
tstest
tstrain
training
testing
numrows(testing)
row(testing)
tstest
fitTrain<-bats(tstrain)
fitTest<-forecast(tstest)
plot(fitTest); lines(tstest,col="red")
accuracy(fitTest,ts.test)
accuracy(fitTest,tstest)
library(forecast)
library(lubridate)  # For year() function below
dat <- read.csv("C:/Users/Jordi/Desktop/CURSOS/Prac_Machine_Learning/Quizzes/gaData.csv")
training <- dat[year(dat$date) < 2012,]
testing <- dat[(year(dat$date)) > 2011,]
tstrain <- ts(training$visitsTumblr)
tstest <- ts(testing$visitsTumblr)
fitTrain<-bats(tstrain)
fitTest<-forecast(tstest)
plot(fitTest); lines(tstest,col="red")
accuracy(fitTest,tstest)
plot(fitTest); lines(tstest,col="red")
summary.forecast
fitTest.summary
summary(fitTest)
summary(fitTrain)
fitTrain
fitTest<-forecast(tstrain)
plot(fitTest); lines(tstest,col="red")
ts(training)
fcast <- forecast.bats(fitTrain, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
count <- 0
for (i in 1:nrow(testing)) {
if (testing$visitsTumblr[i] > fcast$lower[i]) {
if(testing$visitsTumblr[i] < fcast$upper[i]) {
count <- count + 1}
}
}
count/nrow(testing)
plot(fcast); lines(tstest,col="red")
h
nrow(testing)
plot(fcast); lines(testing,col="red")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(concrete)
# load lars package
library(lars)
# perform lasso regression
lasso.fit <- lars(as.matrix(training[,1:8]), training[,9], type="lasso", trace=TRUE)
# plot lasso regression model
covnames<-colnames(training[,1:8])
plot(lasso.fit, breaks=FALSE, cex = 0.75)
# add legend
legend("topleft", covnames, pch=8, lty=1:length(covnames),
col=1:length(covnames), cex = 0.6)
plot.enet(lasso.fit$finalModel, xvar="penalty", use.color=TRUE)
set.seed(3523)
library(caret)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
head(concrete)
# load lars package
library(lars)
# perform lasso regression
lasso.fit <- lars(as.matrix(training[,1:8]), training[,9], type="lasso", trace=TRUE)
# plot lasso regression model
covnames<-colnames(training[,1:8])
plot(lasso.fit, breaks=FALSE, cex = 0.75)
# add legend
legend("topleft", covnames, pch=8, lty=1:length(covnames),
col=1:length(covnames), cex = 0.6)
plot.enet(lasso.fit$finalModel, xvar="penalty", use.color=TRUE)
library(AppliedPredictiveModeling)
library(caret)
library(e1071)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
trainFit<-train(CompressiveStrength ~.,method="svm",data=training)
accuracy(forecast(trainFit,testing),testing$CompressiveStrength)
testin
head(testing)
set.seed(325)
svm.model <- svm(Type ~ ., data = training, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testing[,-9])
accuracy(svm.pred,testing$CompressiveStrength)
svm.model <- svm(CompressiveStrength ~ ., data = training, cost = 100, gamma = 1)
svm.pred <- predict(svm.model, testing[,-9])
accuracy(svm.pred,testing$CompressiveStrength)
svm.model <- svm(CompressiveStrength ~ ., data = training)
svm.pred <- predict(svm.model, testing[,-9])
accuracy(svm.pred,testing$CompressiveStrength)
library(devtools)
install_github("ramnathv/rCharts@dev")
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
require(installr)
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR()
install.packages("installr")
R.version()
R.version
update.R()
updateR()
require(installr)
updateR()
R.version
install.packages('Rcpp')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jordira', token='F8B20E578407EDF86AF164A5C04CF44A', secret='ITojypUjqtdm2SjAckj8dGneBZ/zFq6ajFS00fFP')
shinyapps::deployApp('C:\Users\Jordi\Desktop\CURSOS\DevDatProducts\Quizzes\testShiny')
shinyapps::deployApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/testShiny')
library(conjoint)
data(herbata)
Conjoint(hpref,hprof,hlevn)
install.packages("conjoint")
library(conjoint)
data(herbata)
Conjoint(hpref,hprof,hlevn)
data(czekolada)
Conjoint(cpref,cprof,clevn)
frml()
conjoint::frml
code{\link{caImportance}}
link{caImportance}
link(caImportance)
code()
\code{\link{caImportance}}
load("C:/Users/Jordi/Desktop/CURSOS/conJoint/tea.rda")
data("tea")
Conjoint(cpref,cprof,clevn)
head(tea)
head(tea.rda)
tea.rda
View(caSegmentation)
head(czekolada)
data(czekolada)
head(czekolada)
head("czekolada")
head("czekolada"[1])
head("czekolada"[[1]])
czekolada
head("czekolada"[[[1]]])
head("czekolada"[[1,]])
summary("czekolada")
summary(czekolada)
summary('czekolada')
data(mtcars)
summary(mtcars)
summary(czekolada)
data(czekolada)
summary(czekolada)
summary(cpref)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
library(caret)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
??nnetar
library(forecast)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
data(sunspotarea)
??sunspotarea
library(fpp)
data(sunspotarea)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
install.packages("quantmod") library(quantmod) from.dat <- as.Date("01/01/08", format"%m/%d/%y") to.dat <- as.Date("12/31/13", format("%m/%d/%y") getSymbols(""GOOG"", src="google", from = from.dat, to = to.dat) mGoog <- to.monthly(GOOG[,1]) googOpen <- Op(mGoog) ts1 <- ts(googOpen,frequency=12) ts1Train <- window(ts1,start=1,end=5) ts1Test <- window(ts1,start=5,end=(7-0.01)) ts1Train library(forecast) plot(ts1Train) lines(ma(ts1Train,order=3),col="red") ets1 <- ets(ts1Train,model="MMM") fcast <- forecast(ets1) plot(fcast); lines(ts1Test,col="red")
install.packages("quantmod")
library(quantmod)
from.dat <- as.Date("01/01/08", format"%m/%d/%y")
to.dat <- as.Date("12/31/13", format("%m/%d/%y")
getSymbols(""GOOG"", src="google", from = from.dat, to = to.dat)
mGoog <- to.monthly(GOOG[,1])
googOpen <- Op(mGoog)
ts1 <- ts(googOpen,frequency=12)
ts1Train <- window(ts1,start=1,end=5)
ts1Test <- window(ts1,start=5,end=(7-0.01))
ts1Train
library(forecast)
plot(ts1Train)
lines(ma(ts1Train,order=3),col="red")
ets1 <- ets(ts1Train,model="MMM")
fcast <- forecast(ets1)
plot(fcast); lines(ts1Test,col="red")
### Sunspots Area Forecasting (Neural Network Autorregression)
library(forecast)
library(fpp)
data(sunspotarea)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
plot(forecast(fit,h=100))
head(sunspotarea)
label(sunspotarea)
labels(sunspotarea)
summary(sunspotarea)
plot(sunspots)
head(sunspots)
plot(sunspot.month)
fit <- nnetar(sunspotarea[1:50],lambda=0)
plot(forecast(fit,h=20))
length(sunspotarea)
plot(forecast(fit))
fit <- nnetar(sunspotarea[1:100],lambda=0)
plot(forecast(fit),h=37)
plot(forecast(fit,h=37))
sunspotarea.date
sunspot.year
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=-20))
fit <- nnetar(subset(sunspotarea,),lambda=0)
plot(forecast(fit,h=-20,level=.95))
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=-20,level=.95))
plot(forecast(fit,h=20,level=.95))
plot(forecast.ts(fit,h=20,level=.95))
plot(forecast.ets(fit,h=20,level=.95))
plot(forecast(fit,h=20,fan=true))
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
library(forecast)
library(fpp)
data(sunspotarea)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
lines(forecast(fit,h=10))
library(forecast)
library(fpp)
data(sunspotarea)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
plot(forecast(fit,h=10))
fit
head(fit)
library(forecast)
library(fpp)
data(sunspotarea)
fit <- nnetar(sunspotarea,lambda=0)
plot(forecast(fit,h=20))
lines(fit$x)
plot(fit$x)
forecast(fit,h=20
)
plot(fit$x)
lines(forecast(fit,h=20))
fit$x
forecast(fit,h=20)$x
plot(fit$x)
lines(forecast(fit,h=20)$x)
plot(forecast(fit,h=20)$x)
plot(fit$x)
plot(forecast(fit,h=20)$x)
fit$x
forecast(fit,h=20)$x
forecast(fit,h=20)
colnames(forecast(fit,h=20))
names(forecast(fit,h=20))
plot(forecast(fit,h=20)$fitted)
forecast(fit,h=20)$fitted
plot(fit$x)
lines(forecast(fit,h=20)$fitted)
plot(forecast(fit,h=20))
lines(suspotarea)
lines(sunspotarea)
plot(forecast(fit,h=20),fan=TRUE)
fit2<- forecast.ts(sunspotarea)
fit2<- forecast.ets(sunspotarea)
summary(forecast(fit,h=20))
forecast(fit,h=20)[,1]
forecast(fit,h=20)[1]
forecast(fit,h=20)[1:10]
forecast(fit,h=20)[1:15]
plot(sunspotarea)
lines(forecast(fit,h=20)$mean)
plot(sunspotarea,xlim=c(1875,231))
lines(forecast(fit,h=20)$mean,color="blue")
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,color="blue")
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,col="blue")
trainingSet<-sunspotarea[1875:1960]
fit <- nnetar(trainingSet,lambda=0)
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,col="blue")
trainingSet<-sunspotarea[1:100]
fit <- nnetar(trainingSet,lambda=0)
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,col="blue")
forecast(fit,h=20)$mean
trainingSet<- window(sunspotarea, 1875, c(1875, 2000-1875))
fit <- nnetar(trainingSet,lambda=0)
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,col="blue")
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
fit
sqrt(59328)
accuracy(fit)
accuracy(fit)$RMSE
accuracy(fit)[2]
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
trainingSet<- window(sunspotarea, 1875, c(1875, 2000-1875))
fit <- nnetar(trainingSet,lambda=0)
plot(sunspotarea,xlim=c(1875,2031))
lines(forecast(fit,h=20)$mean,col="blue")
plot(sunspotarea,xlim=c(1875,2031))
fcast<-forecast(fit,h=20)
lines(fcast$mean,col="blue")
fcast
fcast[]
lines(fcast$fitted,col="red")
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
accuracy(fit)
fcast
summary(fcast)
names(fcast)
fcast$lambda
fcast$lags
fcast$scale
fit$model
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
shiny::runApp('C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny')
deployApp()
library(shinyapps)
deployApp()
setwd("C:/Users/Jordi/Desktop/CURSOS/DevDatProducts/Quizzes/Proj_Shiny")
deployApp()
